<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE struts PUBLIC 
     "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN" 
     "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
	<!-- spring 托管 -->
	<constant name="struts.objectFactory" value="spring" />
	<constant name="struts.objectFactory.spring.autoWire.alwaysRespect" value="true" />

	<!-- 设置struts是否为开发模式，默认为false,测试阶段一般设为true,在开发模式下,struts2的动态重新加载配置和资源文件的功能会默认生效。同时开发模式下也会提供更完善的日志支持 -->
	<constant name="struts.devMode" value="false"></constant>
	<!-- convention类从新加载 ,设置在class被修改时是否热加载，发布时要设置为false -->
	<constant name="struts.convention.classes.reload" value="false" />
	<!-- 当struts的配置文件修改后,系统是否自动重新加载该文件,默认值为false(生产环境下使用),开发阶段最好打开 -->
	<constant name="struts.configuration.xml.reload" value="false" />

	<!-- 自动动态方法的调用，使用这个设置后可以这样调用：action!method -->
	<constant name="struts.enable.DynamicMethodInvocation" value="true"></constant>
	<!-- （默认false）设置ognl表达式是否支持静态方法 -->
	<constant name="struts.ognl.allowStaticMethodAccess" value="true" />

	<!--该属性指定需要Struts2处理的请求后缀，该属性的默认值是action，即所有匹配*.action的请求都由Struts2处理. 如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号(，)隔开. -->
	<constant name="struts.action.extension" value="action"></constant>
	<!-- 设置 convention的根包,用于配置包名后缀。默认为action、actions、struts -->
	<constant name="struts.convention.package.locators" value="action" />
	<!-- 用于配置类名后缀,默认为Action,设置后,Struts2只会去找这种后缀名的类做映射,action后缀 -->
	<constant name="struts.convention.action.suffix" value="Action" />
	<!-- 搜索此配置下的所有包 -->
	<constant name="struts.convention.package.locators.basePackage" value="net.luis" />
	<!-- 设置即使没有@Action注释,依然创建Action映射。默认值是false。因为Convention-Plugin是约定优于配置的风格， 
		可以不通过注解根据预先的定义就能访问相应Action中的方法 -->
	<constant name="struts.convention.action.mapAllMatches" value="true" />
	<!-- 分隔符 一个action名字的获取。比如为HelloWorldAction。按照配置，actionName为hello_world。 -->
	<constant name="struts.convention.action.name.separator" value="_" />

	<!-- 资源文件格式化 -->
	<constant name="struts.custom.i18n.resources" value="config.messageResource"></constant>
	<!-- 设置是否每次请求，都重新加载资源文件，默认值为false. -->
	<constant name="struts.i18n.reload" value="false" />

	<!-- 设置浏览器是否缓存静态内容,默认值为true(生产环境下使用),开发阶段最好关闭 -->
	<constant name="struts.serve.static.browserCache" value="false" />

	<constant name="struts.multipart.parser" value="jakarta"></constant>
	<constant name="struts.multipart.maxSize" value="300000000"></constant>
	<constant name="struts.multipart.saveDir" value="c:/tmp"></constant>
	<!-- 主题，将值设置为simple，即不使用UI模板。这将不会生成额外的html标签 -->
	<constant name="struts.ui.theme" value="simple" />

	<!-- 设置默认的locale和字符编码 -->
	<constant name="struts.locale" value="zh_CN" />
	<constant name="struts.i18n.encoding" value="UTF-8" />

	<!--该属性指定模板文件的后缀，该属性的默认属性值是ftl.该属性还允许使用ftl、vm或jsp，分别对应FreeMarker、Velocity和JSP模板. -->
	<constant name="struts.ui.templateSuffix" value="ftl" />
	<!--指定是否缓存FreeMarker模版.默认值false. -->
	<constant name="struts.freemarker.templatesCache" value="true" />


	<!--使用Convention插件,实现约定大于配置的零配置文件风格. 特殊的Result路径在Action类中使用@Result设定. -->
	<!-- <constant name="struts.convention.default.parent.package" value="newdefault"  /> -->

	<package name="deliver" extends="struts-default" namespace="/">
		<!-- 配置自定义拦截器 -->
		<interceptors>
			<interceptor name="authority" class="net.luis.base.interceptor.LoginInterceptor"></interceptor>
			<!-- 拦截器栈 -->
			<interceptor-stack name="deliverdefault">
				<interceptor-ref name="defaultStack" />
				<interceptor-ref name="authority" />
				<interceptor-ref name="token" />
			</interceptor-stack>
		</interceptors>
		
		<global-results>
			<result name="dataAccessFailure">/error-data-access.jsp</result>
		</global-results>
		
		<global-exception-mappings>
			<exception-mapping exception="org.springframework.dao.DataAccessException"
				result="dataAccessFailure" />
		</global-exception-mappings>
	</package>

</struts> 
